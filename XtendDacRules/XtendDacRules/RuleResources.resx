<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateResourceManager" xml:space="preserve">
    <value>Can't create ResourceManager for {0} from {1}</value>
  </data>
  <data name="ColumnWithoutDescription_ProblemDescription" xml:space="preserve">
    <value>Column {0} has no description</value>
  </data>
  <data name="ColumnWithoutDescription_RuleName" xml:space="preserve">
    <value>All columns should have a description</value>
  </data>
  <data name="ConcatNullYieldsNullEnabled_ProblemDescription" xml:space="preserve">
    <value>Procedure {0} sets concat_null_yields_null option to off</value>
  </data>
  <data name="ConcatNullYieldsNullEnabled_RuleName" xml:space="preserve">
    <value>Avoid setting concat_null_yields_null option to off</value>
  </data>
  <data name="CursorColumnMismatch_ProblemDescription" xml:space="preserve">
    <value>Column count of fetch ({1}) does not match cursor '{0}'</value>
  </data>
  <data name="CursorColumnMismatch_RuleName" xml:space="preserve">
    <value>Column count mismatch of fetch and cursor</value>
  </data>
  <data name="CursorMissingStatement_ProblemDescription" xml:space="preserve">
    <value>{0} of cursor '{1}' in procedure {2}</value>
    <comment>{0} = [Invalid or Missing] [open or deallocate]</comment>
  </data>
  <data name="CursorMissingStatement_RuleName" xml:space="preserve">
    <value>Missing or invalid deallocate or open of cursor</value>
  </data>
  <data name="ForeignKeyWithoutIndex_ProblemDescription" xml:space="preserve">
    <value>Foreign key {0} was found without index on table {1}</value>
  </data>
  <data name="ForeignKeyWithoutIndex_RuleName" xml:space="preserve">
    <value>All foreign keys should have an index that covers the foreign key</value>
  </data>
  <data name="MissingMandatoryParameter_ProblemDescription" xml:space="preserve">
    <value>Call to {0}.{1} is missing a mandatory parameter. Parameters missing: {2}</value>
  </data>
  <data name="MissingMandatoryParameter_RuleName" xml:space="preserve">
    <value>All mandatory parameters must be filled in</value>
  </data>
  <data name="NoExplicitNoCountSet_ProblemDescription" xml:space="preserve">
    <value>Procedure {0} does not set nocount</value>
  </data>
  <data name="NoExplicitNoCountSet_RuleName" xml:space="preserve">
    <value>All procedures must set nocount</value>
  </data>
  <data name="NoExplicitXActAbortSet_ProblemDescription" xml:space="preserve">
    <value>Procedure {0} does not set xact_abort</value>
  </data>
  <data name="NoExplicitXActAbortSet_RuleName" xml:space="preserve">
    <value>All procedures must set xact_abort</value>
  </data>
  <data name="NullBooleanComparison_ProblemDescription" xml:space="preserve">
    <value>Invalid null comparison: {0} ({1})</value>
  </data>
  <data name="NullBooleanComparison_RuleName" xml:space="preserve">
    <value>Invalid null comparison</value>
  </data>
  <data name="TableWithoutDescription_ProblemDescription" xml:space="preserve">
    <value>Table {0} has no description</value>
  </data>
  <data name="TableWithoutDescription_RuleName" xml:space="preserve">
    <value>All tables should have a description</value>
  </data>
  <data name="UnusedParameter_ProblemDescription" xml:space="preserve">
    <value>Parameter {0} is unused in procedure {1}</value>
  </data>
  <data name="UnusedParameter_RuleName" xml:space="preserve">
    <value>No unused parameter may exist</value>
  </data>
  <data name="UnusedVariable_ProblemDescription" xml:space="preserve">
    <value>Variable {0} is unused in procedure {1}</value>
  </data>
  <data name="UnusedVariable_RuleName" xml:space="preserve">
    <value>No unused variables may exist</value>
  </data>
  <data name="MissingPartitioningColumn_ProblemDescription" xml:space="preserve">
    <value>Procedure '{0}' queries partitioned table '{1}', and needs to be constrained on column '{2}'</value>
  </data>
  <data name="MissingPartitioningColumn_RuleName" xml:space="preserve">
    <value>Missing partitioning constraint</value>
  </data>
  <data name="UnusedAssignedVariable_ProblemDescription" xml:space="preserve">
    <value>Variable {0} is assigned but its value is never used in procedure {1}</value>
  </data>
  <data name="UnusedAssignedVariable_RuleName" xml:space="preserve">
    <value>Variable is assigned but its value is never used</value>
  </data>
  <data name="UnusedAssignedParameter_ProblemDescription" xml:space="preserve">
    <value>Parameter {0} is assigned but its value is never used in procedure {1}</value>
  </data>
  <data name="UnusedAssignedParameter_RuleName" xml:space="preserve">
    <value>Parameter is assigned but its value is never used</value>
  </data>
</root>